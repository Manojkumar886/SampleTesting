Oops-Object oriended programming system
1.Class
2.object
3.Inheritance
4.Encapsulation
5.Abstraction
6.Polymorphism

1.Class
Group of object........
Contains......Constructor,block{},nested classes

2.Object:
An entity that has charactrerist are state and behavior.for example dog
State-Value(Colour,Generation,Name,Type
behaviour-FUnctionality(bark,food)
identity-Unique id(dog)..

Object creation syntax:

classname objectname=new classname();

classname objname1=new classname();

3.Inheritance:
Inheritance:
--------------
Inheritance the properties of parent into child class

Inheritance is achieved by using the word is "extends";

IS_A relationship......Reusability

why are using inheritance:
---------------------------

Polymorphism ovrriding

code reusability


Inheritance four types used in java:
------------------------------------
single
multiple--java doest support....that time we are using interface(implements)..
multilevel
hierachical


4.ENCAPSULATION
-----------------------------

Encapsulation is a mechanism of the wrapping the data(Variables) and  code action on the method(assume the variable) 
together as single unit..

achieved to steps:(rules)
1.Declare the variable of a class as private...... private int a=10;
2.Provide public getter setter method..(to modify and view the variable values).....

5.ABSTRACTION
------------
hiding the implementation details and shown only funtionality to the user...
example:car-gear,brake,horn........

Achieved steps:
1.must be used in abstract keyword...
2.a method is without (no implementation) is known as abstract method


6.POLYMORPHISM:

full form-Many forms......example:water--soild,liquid,gas
				  shape-circle,rectangle,square

Single action but different behaviours......to ability to take more the one forms.....


two types of polymorphism used in jave;

1.Compile time polymorphism-----method overloading.....
Same class,method name same,Different agruments or parametrized....


Run time polymorphism--------method overriding....
Different class,method same,same as arguments or paramerters


7.INTERFACES
---------------------

interface:

Interface class is assigned complesary interface keyword......
achieved by implements..........
it is used to achieved abstraction method and then most important topic is multiple inheritance.......!


why to use interface in jave...
1.it is used to abstraction....
2.we can support functionality and the multiple inheritance
3. that is used by loose coupling...........


declare the interface class:

interface <classname>
{
//declare abstract method...

//statement
//fields......
}

class--->class=Extends keyword use
interface---->class=Implements keyword use
interface---->interface=extends keyword use
